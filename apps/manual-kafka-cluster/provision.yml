---
# create kafka server and client instances
- name: create kafka instances
  hosts: localhost
  vars_files:
      - group_vars/kafka/vars
      - group_vars/kafka/secret_vars

  tasks:

  - name: assign vpc label
    when: not vpc_label|d(False)
    set_fact:
      vpc_label: '{{ instance_prefix }}-cluster'

  - name: assign vpc subnet
    set_fact:
      vpc_subnet: '10.0.0.0/{{ 32 - (((3*cluster_size) | log(2) | round(0, "ceil"))|int) }}'  # subnet supports an IP range 3x the cluster size

  - name: create vpc
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/vpc/
    linode.cloud.vpc:
      label: '{{ vpc_label }}-{{ region }}'
      region: '{{ region }}'
      api_token: '{{ api_token }}'
      description: VPC for {{ linode_tags }} kafka brokers in {{ region }} to talk to each other.
      state: present
    register: vpc_info
    when: vpc_label|d(False)

  - name: get vpc subnet info
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/vpc_subnet_info/
    linode.cloud.vpc_subnet_info:
      label: '{{ vpc_label }}-{{ region }}-brokers'
      vpc_id: '{{ vpc_info.vpc.id }}'
      api_token: '{{ api_token }}'
    register: vpc_subnet_info
    when:
      - vpc_label|d(False)
      - vpc_info.vpc.id

  - name: remove incompatible subnet
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/vpc_subnet/
    linode.cloud.vpc_subnet:
      label: '{{ vpc_label }}-{{ region }}-brokers'
      api_token: '{{ api_token }}'
      state: absent
      vpc_id: '{{ vpc_info.vpc.id }}'
    when:
      - vpc_label|d(False)
      - vpc_info.vpc.id
      - vpc_subnet_info.subnet.ipv4 != vpc_subnet

  - name: create vpc subnet
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/vpc_subnet/
    linode.cloud.vpc_subnet:
      ipv4: '10.0.0.0/{{ 32 - (((3*cluster_size) | log(2) | round(0, "ceil"))|int) }}'  # subnet supports an IP range 3x the cluster size
      label: '{{ vpc_label }}-{{ region }}-brokers'
      api_token: '{{ api_token }}'
      state: present
      vpc_id: '{{ vpc_info.vpc.id }}'
    register: vpc_subnet_info
    when:
      - vpc_label|d(False)
      - vpc_info.vpc.id

  - name: get firewall info
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/firewall_info/
    linode.cloud.firewall_info:
      label: '{{ firewall_label }}'
      api_token: '{{ api_token }}'
    register: firewall_info
    when: firewall_label|d(False)

  - name: check if instances already created
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/instance_list/
    linode.cloud.instance_list:
      api_token: '{{ api_token }}'
      filters:
        - name: label
          values: "{{ [ instance_prefix ] | product(range(1, cluster_size+1)) | map('join') | list }}"
      order_by: label
    register: existing_instances

  - name: convert instances to a dict
    set_fact:
      existing_instances: "{{ dict(existing_instances.instances | map(attribute='label') | zip(existing_instances.instances)) }}"

  - name: creating kafka servers
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/instance/
    linode.cloud.instance:
      label: '{{ instance_prefix }}{{ item }}'
      api_token: '{{ api_token }}'
      type: '{{ type }}'
      region: '{{ region }}'
      image: '{{ image }}'
      root_pass: '{{ root_password }}'
      authorized_keys: '{{ ssh_keys }}'
      interfaces:
        - purpose: 'vpc'
          subnet_id: '{{ vpc_subnet_info.subnet.id }}'
          primary: true
          ipv4:
            nat_1_1: 'any'
      private_ip: false
      ua_prefix: 'docs-kafka-occ'
      tags: '{{ linode_tags }}'
      state: present
      firewall_id: '{{ (firewall_info.firewall|default({})).id|default(omit) }}'
    with_sequence: count='{{ cluster_size }}'
    when: (instance_prefix + item) not in existing_instances

  - name: get info about the instances
    linode.cloud.instance_info:
      api_token: '{{ api_token }}'
      label: '{{ instance_prefix }}{{ item }}'
    register: info
    with_sequence: count='{{ cluster_size }}'

  - name: check if hosts are in DNS
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/domain_info/
    linode.cloud.domain_info:
      api_token: '{{ api_token }}'
      domain: '{{ domain_name }}'
    when: domain_name|d(False)
    register: domain_info

  - name: remove old hosts from dns
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/domain_record/
    linode.cloud.domain_record:
      api_token: '{{ api_token }}'
      domain_id: '{{ domain_info.domain.id }}'
      record_id: '{{ item.id }}'
      state: absent
    vars:
      instance_ips: "{{ dict(info.results | map(attribute='instance.label') | zip(info.results | map(attribute='networking.ipv4.public.0.address'))) }}"
    when:
      - domain_name|d(False)
      - domain_info|d(False)
      - item.name in instance_ips
      - item.target != instance_ips[item.name]
    with_items: "{{ domain_info.records }}"

  - name: add new hosts to dns
    # https://galaxy.ansible.com/ui/repo/published/linode/cloud/content/module/domain_record/
    linode.cloud.domain_record:
      api_token: '{{ api_token }}'
      domain_id: '{{ domain_info.domain.id }}'
      name: '{{ item.instance.label }}'
      target: '{{ item.instance.ipv4[0] }}'
      ttl_sec: '{{ ttl_sec | default(omit) }}'
      type: 'A'
      state: present
    with_items: "{{ info.results }}"
    when:
      - domain_name|d(False)
      - domain_info|d(False)

  - name: update group_vars
    blockinfile:
      path: ./group_vars/kafka/vars
      marker: "# {mark} INSTANCE VARS"
      block: |
        #jinja2: trim_blocks:False
        kafka_data:
          server:
            {%- for count in range(cluster_size) %}
            - name: {{ info.results[count].instance.label }}
              instance:
                hostname: {{ info.results[count].instance.label }}{% if domain_name|d(False) and domain_info %}.{{ domain_name }}{% endif %}
                ip_pub1: {{ info.results[count].networking.ipv4.public.0.address }}
                ip_priv1: {{ info.results[count].networking.ipv4.vpc.0.address }}
            {%- endfor %}

  - name: add kafka nodes to inventory
    blockinfile:
      path: ./hosts
      marker: "# {mark} KAFKA INSTANCES"
      block: |
        #jinja2: trim_blocks:False
        [kafka]
        {%- for count in range(cluster_size) %}
        {{ info.results[count].networking.ipv4.public.0.rdns }} {% if count < controller_count %}role='controller and broker'{%else%}role='broker only'{%endif%}
        {%- endfor %}

  - name: wait for port 22 to become open
    wait_for:
      port: 22
      host: '{{ item.networking.ipv4.public[0].rdns }}'
      search_regex: OpenSSH
      delay: 10
    connection: local
    with_items: "{{ info.results }}"
